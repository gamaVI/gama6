// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Transaction {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  apiId                     String   @unique
  componentType             String
  address                   String
  transactionAmountM2       Float?
  estimatedAmountM2         Float?
  isEstimatedAmount         Boolean
  gps                       Gps      @relation(fields: [gpsId], references: [id])
  transactionItemsList      String[]
  transactionSumParcelSizes Int
  transactionDate           DateTime  @db.Date
  transactionAmountGross    Float
  transactionTax            Float?
  buildingYearBuilt         Int
  unitRoomCount             Int?
  unitRoomsSumSize          Float
  unitRooms                 String
  gpsId                     String   @db.ObjectId

  @@map("properties")
}

model Gps {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  lat         Float
  lng         Float
  Transaction Transaction[]

  @@map("gps")
}

model Oglas {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  title   String
  photoUrl String
  tip      String
  opis     String
  velikost Float
  cena     Int
  agencija String
  lokacija String
}
